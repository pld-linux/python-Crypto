--- pycrypto-2.6.1/setup.py.orig	2023-10-26 21:03:02.214676533 +0200
+++ pycrypto-2.6.1/setup.py	2023-10-26 21:06:02.467033356 +0200
@@ -55,6 +55,85 @@ USE_GCOV = 0
 
 from setuptools.command.build_py import build_py
 
+if sys.version_info[0] == 3:
+    # from python3.10 distutils/util.py
+    def run_2to3(files, fixer_names=None, options=None, explicit=None):
+        """Invoke 2to3 on a list of Python files.
+        The files should all come from the build area, as the
+        modification is done in-place. To reduce the build time,
+        only files modified since the last invocation of this
+        function should be passed in the files argument."""
+    
+        if not files:
+            return
+    
+        # Make this class local, to delay import of 2to3
+        from lib2to3.refactor import RefactoringTool, get_fixers_from_package
+        from distutils import log
+        class DistutilsRefactoringTool(RefactoringTool):
+            def log_error(self, msg, *args, **kw):
+                log.error(msg, *args)
+    
+            def log_message(self, msg, *args):
+                log.info(msg, *args)
+    
+            def log_debug(self, msg, *args):
+                log.debug(msg, *args)
+    
+        if fixer_names is None:
+            fixer_names = get_fixers_from_package('lib2to3.fixes')
+        r = DistutilsRefactoringTool(fixer_names, options=options)
+        r.refactor(files, write=True)
+    
+    class Mixin2to3:
+        '''Mixin class for commands that run 2to3.
+        To configure 2to3, setup scripts may either change
+        the class variables, or inherit from individual commands
+        to override how 2to3 is invoked.'''
+    
+        # provide list of fixers to run;
+        # defaults to all from lib2to3.fixers
+        fixer_names = None
+    
+        # options dictionary
+        options = None
+    
+        # list of fixers to invoke even though they are marked as explicit
+        explicit = None
+    
+        def run_2to3(self, files):
+            return run_2to3(files, self.fixer_names, self.options, self.explicit)
+    
+    # from python3.10 distutils/command/build_py.py
+    class build_py_2to3(build_py, Mixin2to3):
+        def run(self):
+            self.updated_files = []
+    
+            # Base class code
+            if self.py_modules:
+                self.build_modules()
+            if self.packages:
+                self.build_packages()
+                self.build_package_data()
+    
+            # 2to3
+            self.run_2to3(self.updated_files)
+    
+            # Remaining base class code
+            self.byte_compile(self.get_outputs(include_bytecode=0))
+    
+        def build_module(self, module, module_file, package):
+            res = build_py.build_module(self, module, module_file, package)
+            if res[1]:
+                # file was copied
+                self.updated_files.append(res[0])
+            return res
+
+    build_py_base = build_py_2to3
+else:
+    build_py_base = build_py
+
+
 # Work around the print / print() issue with Python 2.x and 3.x. We only need
 # to print at one point of the code, which makes this easy
 
@@ -225,9 +303,9 @@ class PCTBuildConfigure(Command):
             if os.system(cmd) != 0:
                 raise RuntimeError("autoconf error")
 
-class PCTBuildPy(build_py):
+class PCTBuildPy(build_py_base):
     def find_package_modules(self, package, package_dir, *args, **kwargs):
-        modules = build_py.find_package_modules(self, package, package_dir,
+        modules = build_py_base.find_package_modules(self, package, package_dir,
             *args, **kwargs)
 
         # Exclude certain modules
